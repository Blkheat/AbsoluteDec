 #include "RockPCH.h"
#include "CSetEnv.h"
#include <algorithm>
#include "VFileSystem.h"
//............................................................................................................
// Create Class
//............................................................................................................
CSetEnv::CSetEnv()
{
	m_pSelectData = NULL;
}

//............................................................................................................
// Destroy Class
//............................................................................................................
CSetEnv::~CSetEnv()
{   
  	m_pSelectData = NULL;
}

//............................................................................................................
// 데이터 읽어 Boa 요
//............................................................................................................
int CSetEnv::Load(char *pPath)
{
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if !defined( LOAD_VF ) /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	try
	{ 
		char FileName[ 1024 ] = "";
		
		wsprintf( FileName , "%s\\%s" , pPath , ENVSET_FILENAME );
		
		FILE *fp = NULL;
		
		fp = fopen( FileName , "r+b" );

		if( NULL == fp )
			throw( 0 );
		
		//int DataCount = 16;

		// fread( &DataCount , sizeof( int ) , 1 , fp );
		
		//for( int i = 0 ; i < DataCount ; ++i )
		while( 1 )
		{
			ENV_DATA TempData;
	
			if( FALSE == fread( &TempData , sizeof( ENV_DATA ) , 1 , fp ) )
				break;
		
			m_SetList.push_back( TempData );
		}

		fclose( fp );
	}

///////////////////////////////////////////////////////////////////////////////////////////////////	
#else  ////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

	try
	{
		char FileName[ 1024 ] = "";
		
		wsprintf( FileName , "%s" , ENVSET_FILENAME );

		VFileHandle* pFH = g_VFEnv.OpenFile( FileName );		
		if( pFH == NULL )
			throw( 0 );
		
		ENV_DATA TempData;

		while( 1 )
//		for( int i = 0 ; i < DataCount ; ++i )
		{

			if( pFH->Read( &TempData , sizeof( ENV_DATA ) ) == FALSE )
				break;
		
			m_SetList.push_back( TempData );
		}

		g_VFEnv.CloseFile( pFH );
	}
///////////////////////////////////////////////////////////////////////////////////////////////////	
#endif ////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

	
	//........................................................................................................
	// 빡~~
	//........................................................................................................
	catch( int Type )
	{

		switch( Type )
		{
			case 0:
		
				return FALSE;

			default:

				return FALSE;
		}
		
	}
	//........................................................................................................

	return TRUE;
}

//............................................................................................................
// 맵 로딩시 현 상태 설정하기
//............................................................................................................
int	CSetEnv::Set(int MapIndex,ENV_CYCLE Cycle)
{
	vector <ENV_DATA> ::iterator fi = find( m_SetList.begin() , m_SetList.end() , MapIndex );

	if( fi == m_SetList.end() )
	{
		m_pSelectData = NULL;
	
		return FALSE;	
	}

	m_pSelectData = &(*fi);
	
	return TRUE;
}



